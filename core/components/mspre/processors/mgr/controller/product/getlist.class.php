<?php
include_once dirname(dirname(dirname(__FILE__))) . '/common/trait.php';
include_once dirname(dirname(dirname(__FILE__))) . '/common/trait.php';
require_once(MODX_CORE_PATH . '/components/minishop2/processors/mgr/product/getlist.class.php');

/**
 * Get a list of msProduct
 */
class modmsProductGetListProcessor extends msProductGetListProcessor
{
    use msPreTrait;

    /* @var mspre $mspre */
    public $mspre = null;

    public $languageTopics = array('default', 'mspre', 'minishop2:product');

    /* @var boolean $isCyclic true вернет индитификаторы товаров без обработки */
    public $isCyclic = false;

    public function initialize()
    {
        // Вернет id ресурсов
        $this->isCyclic = $this->setCheckbox('cyclic', false);

        $this->filterCollector();
        $this->mspre = $this->modx->getService('mspre', 'mspre', MODX_CORE_PATH . 'components/mspre/model/');
        $this->mspre->loadMinishop2();
        return parent::initialize(); // TODO: Change the autogenerated stub
    }


    /**
     * Собирает значения установлены пользователем
     */
    public function filterCollector()
    {

        $arrays = $this->properties;
        $fields = [
            'categories' => [],
            'context' => 'web',
            'option_value_exclude' => '',

            'option_key' => '',
            'query' => '',
            'status' => '',
            'product_link' => '',
            'vendor' => '',
            'template' => '',
            'resource_group' => '',
            'filter_field' => '',
            'filter_value' => '',
            'option_value' => '',

            #'nested' => '',
            'additional' => false,
            'favorites' => false,
            'purchased_goods' => false,
            'filter_modifications' => false,
        ];

        $this->selected = [];
        foreach ($arrays as $k => $value) {
            if (array_key_exists($k, $fields)) {
                $default = $fields[$k];
                $offset = false;
                switch ($k) {
                    case 'categories':
                        $value = $this->modx->fromJSON($value);
                        break;
                    case 'option_value_exclude':
                        if (empty($this->getProperty('option_key'))) {
                            $offset = true;
                        }
                        break;
                    case 'nested':
                    case 'additional':
                    case 'favorites':
                    case 'purchased_goods':
                    case 'filter_modifications':
                        $value = (boolean)$value;
                        break;
                    default:
                        break;
                }

                if ($offset) {
                    continue;
                }
                if ($value != $default) {
                    $this->selected[] = $k;
                }
            }
        }

    }

    /**
     * @param xPDOQuery $c
     *
     * @return xPDOQuery
     */
    public function prepareQueryBeforeCount(xPDOQuery $c)
    {
        $c = parent::prepareQueryBeforeCount($c);
        $context = $this->getProperty('context', 'web');
        if ($context != '') {
            $c->where(array(
                "{$this->classKey}.context_key" => $context
            ));
        }

        $vendor = $this->getProperty('vendor');
        if (!empty($vendor)) {
            $c->where(array(
                "Data.vendor" => $vendor
            ));
        }

        $template = $this->getProperty('template');
        if ($template != '') {
            $c->where(array(
                "{$this->classKey}.template" => $template
            ));
        }


        $published = $this->getProperty('published');
        if ($published != '') {
            $c->where(array(
                "{$this->classKey}.published" => $published
            ));
        }

        $this->setStatusFields($c);
        $this->setFilterFields($c);
        $this->filterParent($c);
        $this->filterOptions($c);
        $this->filterFavorites($c);
        $this->filterPurchasedGoods($c);
        $this->filterProductLink($c);
        $this->setSortes($c);
        $this->setFilterAll($c);
        $this->filterModifications($c);


        // TODO доработка для быстрого возврата списка ID с товарами
        // Для возврата позийий
        if ($this->isCyclic) {
            // Возвращаем только ID товара
            $c->query['columns'] = array(
                0 => '`msProduct`.`id`'
            );
        }

        return $c;
    }

    /**
     * @param array $data
     *
     * @return array
     */
    public function iterate(array $data)
    {

        if ($this->isCyclic) {
            if (isset($data['results']) and count($data['results'])) {
                $ids = array_column($data['results'], 'id');
                $this->mspre->setCacheManager($ids);
                $do_not_return = $this->setCheckbox('do_not_return');
                if ($do_not_return) {
                    return array();
                }
                return $ids;
            }
        }
        $list = parent::iterate($data);
        return $this->iterateResults($list);
    }



    /**
     * @param array $resources
     *
     * @return array|boolean
     */
    protected function getCategoryMember($resources)
    {
        $ids = array();
        $q = $this->modx->newQuery('msCategoryMember');
        $q->select('product_id');
        $q->where(array(
            'category_id:IN' => $resources,
        ));
        if ($q->prepare() && $q->stmt->execute()) {
            while ($row = $q->stmt->fetch(PDO::FETCH_ASSOC)) {
                $ids[] = $row['product_id'];
            }
        }

        return count($ids) > 0 ? $ids : false;
    }

    /**
     * @param xPDOQuery $c
     */
    protected function filterParent($c)
    {
        // Parent filter
        if (isset($this->properties['categories'])) {
            $categories = $this->getProperty('categories');
            if (!empty($categories)) {
                $categories = $this->modx->fromJSON($categories);
                if (count($categories) > 0) {
                    if ($nested = $this->setCheckbox('nested') or $additional = $this->setCheckbox('additional')) {
                        $parents = array();
                        foreach ($categories as $parent) {
                            $category = $this->modx->getObject('modResource', $parent);
                            $parents[] = $parent;
                            $tmp = $this->modx->getChildIds($parent, 10, array('context' => $category->get('context_key')));
                            foreach ($tmp as $v) {
                                $parents[] = $v;
                            }
                        }

                        $criteria = array();
                        if ($nested) {
                            $criteria['msProduct.parent:IN'] = $parents;
                        } else {
                            $criteria['msProduct.parent:IN'] = $categories;
                        }

                        if ($this->setCheckbox('additional')) {
                            $criteria['Member.category_id:IN'] = $parents;
                        }

                        $c->orCondition($criteria, '', 1);


                    } else {
                        $c->where(array(
                            "msProduct.parent:IN" => $categories
                        ));
                    }
                }
            }
        }
    }


    /**
     * @param xPDOQuery $c
     */
    protected function filterOptions($c)
    {
        if (isset($this->properties['option_key'])) {
            $option_key = $this->getProperty('option_key');
            $option_value = $this->getProperty('option_value');
            $option_value_exclude = $this->getProperty('option_value_exclude', 'IN');
            if (!empty($option_key) and !empty($option_value)) {

                // Parent filter
                $ids = array();

                $q = $this->modx->newQuery('msProductOption');
                $q->select('product_id');
                $q->groupby('product_id');


                if ($option_value == 'option_values_empty') {
                    // Получаем все товары у которых сещуествует ключ $option_key
                    $q->where(array(
                        'key' => $option_key,
                    ));
                } else {
                    $q->where(array(
                        'key' => $option_key,
                        'value' => $option_value,
                    ));
                }

                if ($q->prepare() && $q->stmt->execute()) {
                    $rows = $q->stmt->fetchAll(PDO::FETCH_ASSOC);
                    $ids = array_column($rows, 'product_id');
                }

                if ($option_value == 'option_values_empty') {
                    // Исключаем все товары с ключом| Или включаем все товары с ключом
                    $c->where(array(
                        "msProduct.id:" . $option_value_exclude => $ids
                    ));
                } else {
                    if (count($ids) > 0) {
                        $c->where(array(
                            "msProduct.id:" . $option_value_exclude => $ids
                        ));
                    } else {
                        $c->where(array(
                            "msProduct.id" => 1000000
                        ));
                    }
                }
            }
        }

    }

    /**
     * @param array $array
     * @param bool $count
     *
     * @return string
     */
    public function outputArray(array $array, $count = false)
    {
        if ($count === false) {
            $count = count($array);
        }
        $data = array(
            'success' => true,
            'results' => $array,
            'total' => $count,
            'total_info' => (string)$count,
            'total_selected' => count($this->selected),
        );

        return json_encode($data);
    }


}

return 'modmsProductGetListProcessor';
